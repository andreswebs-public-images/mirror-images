---
name: public.ecr.aws

permissions:
  id-token: write

on:

  push:
    branches:
      - main

  schedule:
    - cron: 0 0 * * 0

jobs:

  ecr-public:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        image:

          - name: alpine
            tag: latest

          - name: bash
            tag: latest

          - name: ubuntu
            tag: latest

          - name: memcached
            tag: 1.6.7-alpine

          - name: atmoz/sftp
            tag: latest

          - name: grafana/loki
            tag: "2.3.0"

          - name: grafana/promtail
            tag: "2.3.0"

          - name: prom/pushgateway
            tag: v1.3.1

          - name: prom/memcached-exporter
            tag: v0.6.0

          - name: nginxinc/nginx-unprivileged
            tag: 1.19-alpine

          - name: jpetazzo/shpod
            tag: latest

    env:
      CONTAINER_REGISTRY: public.ecr.aws

    steps:

      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Public ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}

      - name: Get image basename
        id: basename
        run: |
          IMAGE_BASENAME=$(basename ${{ matrix.image.name }})
          echo "image-basename=${IMAGE_BASENAME}" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon Public ECR
        env:
          CONTAINER_REGISTRY: ${{ env.CONTAINER_REGISTRY }}
          CONTAINER_REPOSITORY: andreswebs/${{ steps.basename.outputs.image-basename }}
          ORIGIN_REPOSITORY: ${{ matrix.image.name }}
          IMAGE_TAG: ${{ matrix.image.tag }}
        run: |
          docker build --tag "${CONTAINER_REGISTRY}/${CONTAINER_REPOSITORY}:${IMAGE_TAG}" --build-arg "IMAGE=${ORIGIN_REPOSITORY}:${IMAGE_TAG}" .
          docker push "${CONTAINER_REGISTRY}/${CONTAINER_REPOSITORY}:${IMAGE_TAG}"
